FROM registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi8-15.4-0 as base

# Declare all the build arguments and set them to
# environment variables for use in build and runtime
ARG PG_VERSION_MAJOR
ARG PG_BM25_VERSION
ARG PG_SEARCH_VERSION
ARG PGNODEMX_VERSION
ARG PG_CRON_VERSION
ARG PG_NET_VERSION
ARG PG_IVM_VERSION
ARG PG_GRAPHQL_VERSION
ARG PG_HASHIDS_VERSION
ARG PG_JSONSCHEMA_VERSION
ARG PG_REPACK_VERSION
ARG PG_STAT_MONITOR_VERSION
ARG PG_HINT_PLAN_VERSION
ARG PG_ROARINGBITMAP_VERSION
ARG PGFACETING_VERSION
ARG PGML_VERSION
ARG PGTAP_VERSION
ARG PGVECTOR_VERSION
ARG PGAUDIT_VERSION
ARG POSTGIS_VERSION
ARG PGROUTING_VERSION
ARG PGSQL_HTTP_VERSION
ARG HYPOPG_VERSION
ARG RUM_VERSION
ARG AGE_VERSION

ENV PG_VERSION_MAJOR=${PG_VERSION_MAJOR} \
    PG_BM25_VERSION=${PG_BM25_VERSION} \
    PG_SEARCH_VERSION=${PG_SEARCH_VERSION} \
    PGNODEMX_VERSION=${PGNODEMX_VERSION} \
    PG_CRON_VERSION=${PG_CRON_VERSION} \
    PG_NET_VERSION=${PG_NET_VERSION} \
    PG_IVM_VERSION=${PG_IVM_VERSION} \
    PG_GRAPHQL_VERSION=${PG_GRAPHQL_VERSION} \
    PG_HASHIDS_VERSION=${PG_HASHIDS_VERSION} \
    PG_JSONSCHEMA_VERSION=${PG_JSONSCHEMA_VERSION} \
    PG_REPACK_VERSION=${PG_REPACK_VERSION} \
    PG_STAT_MONITOR_VERSION=${PG_STAT_MONITOR_VERSION} \
    PG_HINT_PLAN_VERSION=${PG_HINT_PLAN_VERSION} \
    PG_ROARINGBITMAP_VERSION=${PG_ROARINGBITMAP_VERSION} \
    PGFACETING_VERSION=${PGFACETING_VERSION} \
    PGML_VERSION=${PGML_VERSION} \
    PGTAP_VERSION=${PGTAP_VERSION} \
    PGVECTOR_VERSION=${PGVECTOR_VERSION} \
    PGAUDIT_VERSION=${PGAUDIT_VERSION} \
    POSTGIS_VERSION=${POSTGIS_VERSION} \
    PGROUTING_VERSION=${PGROUTING_VERSION} \
    PGSQL_HTTP_VERSION=${PGSQL_HTTP_VERSION} \
    HYPOPG_VERSION=${HYPOPG_VERSION} \
    RUM_VERSION=${RUM_VERSION} \
    AGE_VERSION=${AGE_VERSION} \
    DEBIAN_FRONTEND=noninteractive \
    TZ=UTC

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

USER 0

RUN microdnf install -y yum

# Install common dependencies to builder and runtime
RUN yum update -y && yum install -y \
    curl \
    wget \
    sudo \
    gnupg \
    gcc \
    python3 \
    python3-devel \
    python3-pip \
    openssl-devel \
    # blas-devel \
    && yum clean all

# Enable epel
RUN yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm

# Install PostgreSQL server development packages

# Install development tools and dependencies for building Perl modules
RUN yum -y install gcc make perl perl-ExtUtils-MakeMaker

# Create a directory for building and installing Perl modules
WORKDIR /opt/perl-modules

# Build and install perl-IPC-Run (necessary for postgresql-devel)
RUN curl -LO https://cpan.metacpan.org/authors/id/T/TO/TODDR/IPC-Run-0.99.tar.gz && \
    tar -xzvf IPC-Run-0.99.tar.gz && \
    cd /opt/perl-modules/IPC-Run-0.99 && \
    perl Makefile.PL && make && make test && make install

RUN rpm --import https://www.postgresql.org/media/keys/ACCC4CF8.asc && \
    yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm && \
    yum update -y \
    yum install -y postgresql${PG_VERSION_MAJOR}-devel && yum clean all

ENV PG_CONFIG=/usr/pgsql-15/bin/pg_config

###############################################
# Second Stage: Builder
###############################################

FROM base as builder

SHELL ["/bin/bash", "-o", "pipefail", "-c"]/

# Enable rockylinux devel repo
RUN echo "[devel]" > /etc/yum.repos.d/custom.repo && \
    echo "name=Devel x86_64" >> /etc/yum.repos.d/custom.repo && \
    echo "baseurl=https://dl.rockylinux.org/pub/rocky/8.8/devel/x86_64/os" >> /etc/yum.repos.d/custom.repo && \
    echo "enabled=1" >> /etc/yum.repos.d/custom.repo && \
    echo "gpgcheck=0" >> /etc/yum.repos.d/custom.repo

# Install Rust and other build dependencies
RUN yum update -y && yum install -y \
    make \
    automake \
    gcc \
    gcc-c++ \
    clang \
    git \
    cmake \
    pkgconfig \
    lz4-devel \
    libcurl-devel \
    bison \
    # flex \
    python3.11 \
    readline-devel \
    && alias python3=python3.11 \
    && yum clean all


# Install Rust using rustup
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

# Set environment variables
ENV PATH="/root/.cargo/bin:$PATH" \
    PGX_HOME=/usr/lib/postgresql/${PG_VERSION_MAJOR}

# Install cargo-pgrx
RUN cargo install cargo-pgrx --version 0.9.8 && cargo pgrx init

######################
# pg_bm25
######################

FROM builder as builder-pg_bm25

WORKDIR /tmp/pg_bm25

COPY pg_bm25/ /tmp/pg_bm25

# Use the build argument to update the version in Cargo.toml
RUN sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"${PG_BM25_VERSION}\"/" Cargo.toml && \
    cargo pgrx package

####################
# pgml
####################

FROM builder as builder-pgml

# Install additional dependencies for pgml
RUN yum update -y && yum install -y \
    zlib-devel \
    tzdata \
    libpq-devel \
    llvm-toolset     \
    && yum clean all

# Clone the pgml repository and set the desired version
RUN git clone --branch "v${PGML_VERSION}" "https://github.com/paradedb/postgresml" /tmp/postgresml

WORKDIR /tmp/postgresml/pgml-extension

RUN git submodule update --init --recursive && \
    git fetch --tags --depth 1 origin tag "v${PGML_VERSION}" && \
    git checkout "v${PGML_VERSION}"

# Update pgml schema to paradedb
RUN sed -i "s/\(schema = \).*/\1'paradedb'/" pgml.control && \
    find . -type f -exec sed -i 's/pgml\./paradedb\./g' {} + && \
    cargo pgrx package

######################
# pg_search
######################

FROM builder as builder-pg_search

WORKDIR /tmp/pg_search

COPY pg_search/ /tmp/pg_search

# Use the build argument to update the version in Cargo.toml
RUN sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"${PG_SEARCH_VERSION}\"/" Cargo.toml && \
    cargo pgrx package

######################
# Other extensions
######################

FROM builder as builder-others

ARG TARGETARCH

ENV USE_PGXS=1

# Install additional dependencies for various extensions
RUN yum update -y && yum install -y \
    systemtap-sdt-devel \
    krb5-devel \
    geos-devel \
    proj-devel \
    protobuf-c-devel \
    SFCGAL-devel \
    libxml2-devel \
    json-c-devel \
    gdal-devel \
    # gdal-bin \
    gettext \
    libtool \
    libxslt \
    protobuf-c-compiler \
    zlib-devel \
    && yum clean all

# Copy the script for installing PostgreSQL extensions
COPY scripts/install_pg_extensions.sh /usr/local/bin/

# Compile and install extensions from source
RUN /usr/local/bin/install_pg_extensions.sh \
    "pgvector,${PGVECTOR_VERSION},https://github.com/pgvector/pgvector/archive/refs/tags/v${PGVECTOR_VERSION}.tar.gz" \
    "pgaudit,${PGAUDIT_VERSION},https://github.com/pgaudit/pgaudit/archive/refs/tags/${PGAUDIT_VERSION}.tar.gz" \
    "pgnodemx,${PGNODEMX_VERSION},https://github.com/crunchydata/pgnodemx/archive/refs/tags/${PGNODEMX_VERSION}.tar.gz" \
    "pg_cron,${PG_CRON_VERSION},https://github.com/citusdata/pg_cron/archive/refs/tags/v${PG_CRON_VERSION}.tar.gz" \
    "pg_ivm,${PG_IVM_VERSION},https://github.com/sraoss/pg_ivm/archive/refs/tags/v${PG_IVM_VERSION}.tar.gz" \
    "pg_hashids,${PG_HASHIDS_VERSION},https://github.com/iCyberon/pg_hashids/archive/refs/tags/v${PG_HASHIDS_VERSION}.tar.gz" \
    "pg_repack,${PG_REPACK_VERSION},https://github.com/reorg/pg_repack/archive/refs/tags/${PG_REPACK_VERSION}.tar.gz" \
    "pg_stat_monitor,${PG_STAT_MONITOR_VERSION},https://github.com/percona/pg_stat_monitor/archive/refs/tags/${PG_STAT_MONITOR_VERSION}.tar.gz" \
    "pg_hint_plan,${PG_HINT_PLAN_VERSION},https://github.com/ossc-db/pg_hint_plan/archive/refs/tags/${PG_HINT_PLAN_VERSION}.tar.gz" \
    "pg_roaringbitmap,${PG_ROARINGBITMAP_VERSION},https://github.com/ChenHuajun/pg_roaringbitmap/archive/refs/tags/v${PG_ROARINGBITMAP_VERSION}.tar.gz" \
    "pgfaceting,${PGFACETING_VERSION},https://github.com/cybertec-postgresql/pgfaceting/archive/refs/tags/v${PGFACETING_VERSION}.tar.gz" \
    "pgtap,${PGTAP_VERSION},https://github.com/theory/pgtap/archive/refs/tags/v${PGTAP_VERSION}.tar.gz" \
    "postgis,${POSTGIS_VERSION},https://github.com/postgis/postgis/archive/refs/tags/${POSTGIS_VERSION}.tar.gz" \
    "pgrouting,${PGROUTING_VERSION},https://github.com/pgRouting/pgrouting/archive/refs/tags/v${PGROUTING_VERSION}.tar.gz" \
    "pgsql-http,${PGSQL_HTTP_VERSION},https://github.com/pramsey/pgsql-http/archive/refs/tags/v${PGSQL_HTTP_VERSION}.tar.gz" \
    "hypopg,${HYPOPG_VERSION},https://github.com/HypoPG/hypopg/archive/refs/tags/${HYPOPG_VERSION}.tar.gz" \
    "rum,${RUM_VERSION},https://github.com/postgrespro/rum/archive/refs/tags/${RUM_VERSION}.tar.gz" \
    "age,${AGE_VERSION},https://github.com/apache/age/archive/refs/tags/PG${PG_VERSION_MAJOR}/v${AGE_VERSION}.tar.gz"

# Install pre-compiled extensions
RUN curl -L "https://github.com/supabase/pg_net/releases/download/v${PG_NET_VERSION}/pg_net-v${PG_NET_VERSION}-pg${PG_VERSION_MAJOR}-$TARGETARCH-linux-gnu.deb" -o /tmp/pg_net.deb && \
    curl -L "https://github.com/supabase/pg_graphql/releases/download/v${PG_GRAPHQL_VERSION}/pg_graphql-v${PG_GRAPHQL_VERSION}-pg${PG_VERSION_MAJOR}-$TARGETARCH-linux-gnu.deb" -o /tmp/pg_graphql.deb && \
    curl -L "https://github.com/supabase/pg_jsonschema/releases/download/v${PG_JSONSCHEMA_VERSION}/pg_jsonschema-v${PG_JSONSCHEMA_VERSION}-pg${PG_VERSION_MAJOR}-$TARGETARCH-linux-gnu.deb" -o /tmp/pg_jsonschema.deb

##############################################
# Third Stage: PostgreSQL
##############################################

FROM builder as paradedb

ARG TARGETARCH

WORKDIR /usr/src/app

COPY --from=builder-pgml /tmp/postgresml/pgml-extension/requirements.txt /usr/src/app/

# Copy & install the non-pgrx extensions from their builder stage
COPY --from=builder-others /tmp/*.rpm /tmp/
RUN yum install -y /tmp/*.rpm && yum clean all

# Copy the pg_bm25, pgml & pg_search extensions from their builder stages
# We order them by how unlikely they are to be modified, to reduce layer rebuilds
COPY --from=builder-pgml /tmp/postgresml/pgml-extension/target/release/pgml-pg${PG_VERSION_MAJOR}/usr/share/postgresql/${PG_VERSION_MAJOR}/extension/* /usr/share/postgresql/${PG_VERSION_MAJOR}/extension/
COPY --from=builder-pgml /tmp/postgresml/pgml-extension/target/release/pgml-pg${PG_VERSION_MAJOR}/usr/lib64/postgresql/${PG_VERSION_MAJOR}/lib/* /usr/lib64/postgresql/${PG_VERSION_MAJOR}/lib/
COPY --from=builder-pg_search /tmp/pg_search/target/release/pg_search-pg${PG_VERSION_MAJOR}/usr/share/postgresql/${PG_VERSION_MAJOR}/extension/* /usr/share/postgresql/${PG_VERSION_MAJOR}/extension/
COPY --from=builder-pg_search /tmp/pg_search/target/release/pg_search-pg${PG_VERSION_MAJOR}/usr/lib64/postgresql/${PG_VERSION_MAJOR}/lib/* /usr/lib64/postgresql/${PG_VERSION_MAJOR}/lib/
COPY --from=builder-pg_bm25 /tmp/pg_bm25/target/release/pg_bm25-pg${PG_VERSION_MAJOR}/usr/share/postgresql/${PG_VERSION_MAJOR}/extension/* /usr/share/postgresql/${PG_VERSION_MAJOR}/extension/
COPY --from=builder-pg_bm25 /tmp/pg_bm25/target/release/pg_bm25-pg${PG_VERSION_MAJOR}/usr/lib64/postgresql/${PG_VERSION_MAJOR}/lib/* /usr/lib64/postgresql/${PG_VERSION_MAJOR}/lib/

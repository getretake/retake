use pgrx::*;
use thiserror::Error;

#[derive(PartialEq)]
pub enum FdwHandler {
    S3,
    LocalFile,
    Gcs,
    Other,
}

/// These names are auto-generated by supabase-wrappers
/// If the FDW is called MyContainerFdw, the handler name will be my_container_fdw_handler
impl TryFrom<&str> for FdwHandler {
    type Error = FdwHandlerError;

    fn try_from(handler_name: &str) -> Result<Self, Self::Error> {
        match handler_name {
            "s3_fdw_handler" => Ok(FdwHandler::S3),
            "local_file_fdw_handler" => Ok(FdwHandler::LocalFile),
            "gcs_fdw_handler" => Ok(FdwHandler::Gcs),
            _ => Ok(FdwHandler::Other),
        }
    }
}

impl From<*mut pg_sys::ForeignServer> for FdwHandler {
    fn from(server: *mut pg_sys::ForeignServer) -> Self {
        let oid = unsafe { (*server).fdwid };
        let fdw = unsafe { pg_sys::GetForeignDataWrapper(oid) };
        let handler_oid = unsafe { (*fdw).fdwhandler };
        let proc_tuple = unsafe {
            pg_sys::SearchSysCache1(
                pg_sys::SysCacheIdentifier_PROCOID as i32,
                handler_oid.into_datum().unwrap(),
            )
        };
        let pg_proc = unsafe { pg_sys::GETSTRUCT(proc_tuple) as pg_sys::Form_pg_proc };
        let handler_name = unsafe { name_data_to_str(&(*pg_proc).proname) };
        unsafe { pg_sys::ReleaseSysCache(proc_tuple) };

        FdwHandler::try_from(handler_name).unwrap()
    }
}

#[derive(Error, Debug)]
pub enum FdwHandlerError {
    #[error("Cannot get handler name from unknown FDW")]
    UnknownFdwName,
}

# workflows/schema-upgrade-check.yml
#
# Determine if a commit introduces an extension schema change

name: Check for Extension Schema Change

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - dev
      - main
    paths:
      - ".github/workflows/schema-upgrade-check.yml"
      - "pg_search/**"
      - "!pg_search/README.md"
  push:
    branches:
      - dev # Run CI on dev. This is important to fill the GitHub Actions cache in a way that pull requests can see it

concurrency:
  group: schema-upgrade-check-pg_search-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  schema-upgrade-check:
    name: Does this commit introduce a schema change?
    runs-on: ${{ matrix.runner }}
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        include:
          - runner: depot-ubuntu-latest-8
            pg_version: 13
            arch: amd64

    env:
      default_pg_version: 13

    steps:
      # For the Rust cache to get filled, we need to run the CI on the dev branch after every merge. This only
      # needs to happen once, so we skip the workflow for all but one of the matrix jobs in that case.
      - name: Check if Skipping
        id: check_skip
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ matrix.pg_version }}" != "${{ env.default_pg_version }}" ]]; then
            echo "This is a push event to fill Rust cache. Skipping this job."
            echo "skip_remaining_steps=true" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Git Repository
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: actions/checkout@v4
        # we need to whole repo b/c we switch revs later on
        with:
          fetch-depth: 0

      - name: Install Rust
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: dtolnay/rust-toolchain@stable

      # Caches from base branches are available to PRs, but not across unrelated branches, so we only
      # save the cache on the 'dev' branch, but load it on all branches.
      - name: Install Rust Cache
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1"
          shared-key: ${{ runner.os }}-rust-cache-pg_search-${{ HashFiles('Cargo.lock') }}
          cache-targets: true
          cache-on-failure: true
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/dev' }}

      - name: Install & Configure Supported PostgreSQL Version
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/ /usr/lib/postgresql/${{ matrix.pg_version }}/ /var/lib/postgresql/${{ matrix.pg_version }}/
          rustup component add llvm-tools-preview
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Extract pgrx version & Install cargo-pgrx
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        working-directory: pg_search/
        run: |
          PGRX_VERSION=$(cargo tree --depth 1 -i pgrx -p pg_search | head -n 1 | cut -f2 -dv)
          cargo install -j $(nproc) --locked cargo-pgrx --version ${PGRX_VERSION}
          cargo pgrx init "--pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      - name: Generate Schema from this rev
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: |
          cargo pgrx schema -p pg_search pg${{ matrix.pg_version }} > ~/this.sql
          cat ~/this.sql

      - name: Switch to base rev
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: |
          git checkout v0.9.0 # ${{ github.event.pull_request.base.ref }}

      - name: Extract pgrx version & Install cargo-pgrx for base rev (pgrx version could be different)
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        working-directory: pg_search/
        run: |
          PGRX_VERSION=$(cargo tree --depth 1 -i pgrx -p pg_search | head -n 1 | cut -f2 -dv)
          cargo install -j $(nproc) --locked cargo-pgrx --version ${PGRX_VERSION} --force
          cargo pgrx init "--pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config"

      - name: Generate Schema from base rev
        if: steps.check_skip.outputs.skip_remaining_steps != 'true'
        run: |
          cargo pgrx schema -p pg_search pg${{ matrix.pg_version }} > ~/old.sql
          cat ~/old.sql

      - name: Install pg-schema-diff
        run: |
          sudo apt install clang llvm
          cargo install --git https://github.com/zombodb/pg-schema-diff.git

      - name: Run diff
        run: |
          pg-schema-diff diff ~/old.sql ~/this.sql

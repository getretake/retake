name: Publish Python Package

on:
  push:
    branches:
      - dev
      - staging
      - main
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Retrieve Current Version Number
        id: version
        run: |
          echo "Current prod version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}"
          echo "Current staging version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-staging-rc.${{ vars.VERSION_STAGING_RC }}"
          echo "Current dev version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-dev-rc.${{ vars.VERSION_DEV_RC }}"

          # if dev or staging, increment RC by 1, else increment micro by 1 and set RC to 0
          if [[ "${{ steps.env.outputs.environment }}" == "prod" ]]; then
            echo 'Using prod configuration...'

            # increment version by 0.0.1
            NEW_MICRO=$(( ${{ vars.VERSION_PATCH }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${NEW_MICRO}"
            GHA_VAR_NAME="VERSION_PATCH"
            GHA_VAR_VALUE="${NEW_MICRO}"
          elif [[ "${{ steps.env.outputs.environment }}" == "staging" ]]; then
            echo 'Using staging configuration...'

            # increment version by staging-rc.1
            NEW_STAGING_RC=$(( ${{ vars.VERSION_STAGING_RC }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-staging-rc.${NEW_STAGING_RC}"
            GHA_VAR_NAME="VERSION_STAGING_RC"
            GHA_VAR_VALUE="${NEW_STAGING_RC}"
          elif [[ "${{ steps.env.outputs.environment }}" == "dev" ]]; then
            echo 'Using dev configuration...'

            # increment version by dev-rc.1
            NEW_DEV_RC=$(( ${{ vars.VERSION_DEV_RC }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-dev-rc.${NEW_DEV_RC}"
            GHA_VAR_NAME="VERSION_DEV_RC"
            GHA_VAR_VALUE="${NEW_DEV_RC}"
          else
            echo "Error: Invalid branch" && false
          fi

          # Update the pyproject.toml file to publish the new version to PyPi
          sed "s/version = .*/version = \"${NEW_VERSION}\"/" pyproject.toml > "pyproject.toml.new"
          mv "pyproject.toml.new" pyproject.toml

          # Output the new version to create the GitHub tag
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "gha_var_name=${GHA_VAR_NAME}" >> $GITHUB_OUTPUT
          echo "gha_var_value=${GHA_VAR_VALUE}" >> $GITHUB_OUTPUT

      - name: Build and publish to PyPI (prod only)
        if: ${{ steps.env.outputs.environment }}" == "prod"
        env:
          ENVIRONMENT: ${{ steps.env.outputs.environment }}
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry build
          poetry publish

      - name: Update Version Number
        env:
          GH_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/getretake/retake/actions/variables/${{ steps.version.outputs.gha_var_name }} \
            -f name='${{ steps.version.outputs.gha_var_name }}' \
            -f value='${{ steps.version.outputs.gha_var_value }}'

      - name: Retrieve Today's Date
        id: date
        run: |
          echo "v${{ steps.version.outputs.version }}"
          echo "date=$(date)" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release (prod only)
        uses: softprops/action-gh-release@v1
        if: ${{ steps.env.outputs.environment }}" == "prod"
        with:
          tag_name: v${{ steps.version.outputs.version }}
          body: Retake Production Release on ${{ steps.date.outputs.date }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}

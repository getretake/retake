name: Publish Python Package

on:
  push:
    branches:
      - dev
      - staging
      - main
  pull_request:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "::set-output name=environment::prod"
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "::set-output name=environment::staging"
          else
            echo "::set-output name=environment::dev"
          fi

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Retrieve Current Version Number
        id: version
        run: |
          echo "Current prod version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_MICRO }}"
          echo "Current staging version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_MICRO }}-staging-rc.${{ vars.VERSION_STAGING_RC }}"
          echo "Current dev version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_MICRO }}-dev-rc.${{ vars.VERSION_DEV_RC }}"

          # if dev or staging, increment RC by 1, else increment micro by 1 and set RC to 0
          if [[ "${{ steps.env.outputs.environment }}" == "prod" ]]; then
            echo 'Using prod configuration...'

            # increment version by 0.0.1
            NEW_MICRO=$(( ${{ vars.VERSION_MICRO }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${NEW_MICRO}"
          elif [[ "${{ steps.env.outputs.environment }}" == "staging" ]]; then
            echo 'Using staging configuration...'

            # increment version by staging-rc.1
            NEW_STAGING_RC=$(( ${{ vars.VERSION_STAGING_RC }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_MICRO }}-staging-rc.${NEW_STAGING_RC}"
            
          elif [[ "${{ steps.env.outputs.environment }}" == "dev" ]]; then
            echo 'Using dev configuration...'

            # increment version by dev-rc.1
            NEW_DEV_RC=$(( ${{ vars.VERSION_DEV_RC }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_MICRO }}-dev-rc.${NEW_DEV_RC}"
          else
            echo 'Error: Invalid branch' && false
          fi

          # Update the pyproject.toml file to publish the new version to PyPi
          sed "s/version = .*/version = \"${NEW_VERSION}\"/" pyproject.toml > "pyproject.toml.new"
          mv "pyproject.toml.new" pyproject.toml
          
          # Output the new version to create the GitHub tag
          echo "::set-output name=version::${NEW_VERSION}/"

      # - name: Build and publish to PyPI
      #   env:
      #     ENVIRONMENT: ${{ steps.env.outputs.environment }}
      #   run: |
      #     poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
      #     poetry build
      #     poetry publish

      - name: Update Version Number
        run: |
          echo "1"

      - name: Retrieve Today's Date
        id: date
        run: |
          echo "v${{ steps.version.outputs.version }}"
          echo "::set-output name=date::$(date)"

      - name: Create GitHub Tag
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          body: Retake Production Release on ${{ steps.date.outputs.date }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}

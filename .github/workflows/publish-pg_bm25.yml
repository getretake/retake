# workflows/publish-pg_bm25.yml
#
# pg_bm25: Publish
# Build and publish the pg_bm25 extension to APT and Homebrew.

name: Publishing

on:
  push:
    branches:
      - phil/apt # TODO: remove this after testing
    tags:
      - "v*"
  workflow_dispatch:

concurrency:
  group: publish-pg_bm25-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-pg_bm25-to-apt:
    name: Publish pg_bm25 for PostgreSQL ${{ matrix.pg_version }} to APT
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # pg_version: [11, 12, 13, 14, 15]
        pg_version: [15]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
          key: ${{ runner.os }}-cargo-pgrx-0.9.8
          restore-keys: |
            ${{ runner.os }}-cargo-pgrx
            ${{ runner.os }}-cargo

      - name: Retrieve GitHub Tag Version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Retrieve Arch
        id: arch
        run: |
          arch_val=$(uname -m)
          if [ "$arch_val" == "x86_64" ]; then
              mapped_arch="amd64"
          elif [ "$arch_val" == "aarch64" ]; then
              mapped_arch="arm64"
          else
              mapped_arch="$arch_val"
          fi
          echo "arch=$mapped_arch" >> $GITHUB_OUTPUT

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }} debhelper devscripts dput gnupg
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/extension/ /usr/lib/postgresql/${{ matrix.pg_version }}/lib/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install pgrx
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: cargo install cargo-pgrx --version 0.9.8

      - name: Initialize pgrx for Current PostgreSQL Version
        working-directory: pg_bm25/
        run: cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config

      # TODO: Update this when it is finished testing
      - name: Update Version in Cargo.toml
        working-directory: pg_bm25/
        # run: sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"${{ steps.version.outputs.version }}\"/" Cargo.toml
        run: sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"0.0.1\"/" Cargo.toml

      - name: Package pg_bm25 Extension with pgrx
        working-directory: pg_bm25/
        run: cargo pgrx package

      # Works up to here

      - name: Create Installable Package
        run: |
          # Create installable package
          mkdir archive
          cp `find target/release -type f -name "pg_bm25*"` archive

          # name of the package directory before packaging
          package_dir=pg_bm25-${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}-${{ steps.arch.outputs.arch }}-linux-gnu

          # Copy files into directory structure
          mkdir -p ${package_dir}/usr/lib/postgresql/lib
          mkdir -p ${package_dir}/var/lib/postgresql/extension
          cp archive/*.so ${package_dir}/usr/lib/postgresql/lib
          cp archive/*.control ${package_dir}/var/lib/postgresql/extension
          cp archive/*.sql ${package_dir}/var/lib/postgresql/extension

          # symlinks to Copy files into directory structure
          mkdir -p ${package_dir}/usr/lib/postgresql/${{ matrix.pg_version }}/lib
          mkdir -p ${package_dir}/usr/share/postgresql/${{ matrix.pg_version}}/extension
          cp archive/*.so ${package_dir}/usr/lib/postgresql/${{ matrix.pg_version }}/lib
          cp archive/*.control ${package_dir}/usr/share/postgresql/${{ matrix.pg_version }}/extension
          cp archive/*.sql ${package_dir}/usr/share/postgresql/${{ matrix.pg_version }}/extension

          # Create install control file
          # TODO: uncomment this once ready to push deb_version=${{ steps.version.outputs.version }}
          deb_version=0.0.1
          mkdir -p ${package_dir}/debian
          touch ${package_dir}/debian/control
          touch ${package_dir}/debian/changelog
          touch ${package_dir}/debian/rules

          # Create control file
          # Can't do underscore for package name
          CONTROL_FILE="${package_dir}/debian/control"
          echo 'Source: pg-bm25' >> $CONTROL_FILE
          echo 'Package: pg-bm25' >> $CONTROL_FILE
          echo 'Version:' ${deb_version} >> $CONTROL_FILE
          echo 'Architecture: ${{ steps.arch.outputs.arch }}' >> $CONTROL_FILE
          echo 'Maintainer: ParadeDB' >> $CONTROL_FILE
          echo 'Description: A PostgreSQL Extension' >> $CONTROL_FILE

          # Create changelog file
          # TODO: update to use var for version
          echo "pg_bm25 (0.0.1) stable; urgency=medium" >> ${package_dir}/debian/changelog
          echo "" >> ${package_dir}/debian/changelog
          echo "  * See the changelog: https://github.com/paradedb/paradedb/releases/tag/v0.2.21" >> ${package_dir}/debian/changelog
          echo "" >> ${package_dir}/debian/changelog
          echo "-- ParadeDB <support@paradedb.com>  $(date -R)" >> ${package_dir}/debian/changelog

          # Create rules file
          RULES_FILE="${package_dir}/debian/rules"
          echo "#!/usr/bin/make -f" >> $RULES_FILE
          echo "" >> $RULES_FILE
          echo "# Uncomment the following line to see the commands being executed" >> $RULES_FILE
          echo "# export DH_VERBOSE=1" >> $RULES_FILE
          echo "" >> $RULES_FILE
          echo "# Override the default build rule (do nothing since we already have our binaries)" >> $RULES_FILE
          echo "override_dh_auto_build:" >> $RULES_FILE
          echo "" >> $RULES_FILE
          echo "# Override the default install rule" >> $RULES_FILE
          echo "override_dh_auto_install:" >> $RULES_FILE
          echo "    # Copy the extension files to the debian package structure" >> $RULES_FILE
          echo "    install -D ${package_dir}/var/lib/postgresql/extension/* debian/pg_bm25/usr/share/postgresql/${{ matrix.pg_version }}/extension/" >> $RULES_FILE
          echo "    install -D ${package_dir}/usr/share/postgresql/${{ matrix.pg_version }}/extension/* debian/pg_bm25/usr/share/postgresql/${{ matrix.pg_version }}/extension/" >> $RULES_FILE
          echo "    " >> $RULES_FILE
          echo "    # Copy the library files to the debian package structure" >> $RULES_FILE
          echo "    install -D ${package_dir}/usr/lib/postgresql/lib/* debian/pg_bm25/usr/lib/postgresql/${PG_VERSION_MAJOR}/lib/" >> $RULES_FILE
          echo "    install -D ${package_dir}/usr/lib/postgresql/${{ matrix.pg_version }}/lib/* debian/pg_bm25/usr/lib/postgresql/${PG_VERSION_MAJOR}/lib/" >> $RULES_FILE
          echo "" >> $RULES_FILE
          echo "%:" >> $RULES_FILE
          echo "	dh \$@" >> $RULES_FILE

          # Make rules file executable
          chmod +x ${package_dir}/debian/rules

      - name: Upload to APT PPA
        working-directory: pg_bm25-${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}-${{ steps.arch.outputs.arch }}-linux-gnu
        env:
          PRIVATE_GPG_KEY: ${{ secrets.APT_PPA_OPENPGP_KEY }}
          PASSPHRASE: ${{ secrets.APT_PPA_OPENPGP_KEY_PASSPHRASE }}
        run: |
          # Ensure the .gnupg directory exists
          mkdir -p ~/.gnupg

          # Ensure gpg-agent.conf exists before appending to it
          touch ~/.gnupg/gpg-agent.conf
          chmod 700 ~/.gnupg

          # Configure GPG to use the passphrase from the environment variable
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          export GPG_TTY=$(tty)
          echo RELOADAGENT | gpg-connect-agent

          # Import the private key
          echo "$PRIVATE_GPG_KEY" | gpg --batch --import

          # Build source package
          echo "$PASSPHRASE" | debuild -S -sa -- -passphrase-fd 0
          dput ppa:philippemnoel/paradedb *.changes

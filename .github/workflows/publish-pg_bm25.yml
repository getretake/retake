# workflows/publish-pg_bm25.yml
#
# pg_bm25: Publish
# Build and publish the pg_bm25 extension as a .deb to GitHub Releases.

name: Publishing

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

concurrency:
  group: publish-pg_bm25-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-pg_bm25:
    name: Publish pg_bm25 for PostgreSQL ${{ matrix.pg_version }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            pg_version: 15
            arch: amd64
          - runner: ubuntu-latest
            pg_version: 14
            arch: amd64
          - runner: ubuntu-latest
            pg_version: 13
            arch: amd64
          - runner: ubuntu-latest
            pg_version: 12
            arch: amd64
          - runner: ubuntu-latest
            pg_version: 11
            arch: amd64
          - runner: buildjet-4vcpu-ubuntu-2204-arm
            pg_version: 15
            arch: arm64
          - runner: buildjet-4vcpu-ubuntu-2204-arm
            pg_version: 14
            arch: arm64
          - runner: buildjet-4vcpu-ubuntu-2204-arm
            pg_version: 13
            arch: arm64
          - runner: buildjet-4vcpu-ubuntu-2204-arm
            pg_version: 12
            arch: arm64
          - runner: buildjet-4vcpu-ubuntu-2204-arm
            pg_version: 11
            arch: arm64

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
          key: ${{ runner.os }}-cargo-pgrx-0.9.8
          restore-keys: |
            ${{ runner.os }}-cargo-pgrx
            ${{ runner.os }}-cargo

      - name: Retrieve GitHub Tag Version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Retrieve Arch
        id: arch
        run: |
          arch_val=$(uname -m)
          if [ "$arch_val" == "x86_64" ]; then
              mapped_arch="amd64"
          elif [ "$arch_val" == "aarch64" ]; then
              mapped_arch="arm64"
          else
              mapped_arch="$arch_val"
          fi
          echo "arch=$mapped_arch" >> $GITHUB_OUTPUT

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/extension/ /usr/lib/postgresql/${{ matrix.pg_version }}/lib/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install pgrx
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: cargo install cargo-pgrx --version 0.9.8

      - name: Initialize pgrx for Current PostgreSQL Version
        working-directory: pg_bm25/
        run: cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config

      - name: Update Version in Cargo.toml
        working-directory: pg_bm25/
        run: sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"${{ steps.version.outputs.version }}\"/" Cargo.toml

      - name: Package pg_bm25 Extension with pgrx
        working-directory: pg_bm25/
        run: cargo pgrx package

      - name: Create .deb Package
        run: |
          # Create installable package
          mkdir archive
          cp `find target/release -type f -name "pg_bm25*"` archive
          package_dir=pg_bm25-${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}-${{ steps.arch.outputs.arch }}-linux-gnu

          # Copy files into directory structure
          mkdir -p ${package_dir}/usr/lib/postgresql/lib
          mkdir -p ${package_dir}/var/lib/postgresql/extension
          cp archive/*.so ${package_dir}/usr/lib/postgresql/lib
          cp archive/*.control ${package_dir}/var/lib/postgresql/extension
          cp archive/*.sql ${package_dir}/var/lib/postgresql/extension

          # Symlinks to copy files into directory structure
          mkdir -p ${package_dir}/usr/lib/postgresql/${{ matrix.pg_version }}/lib
          mkdir -p ${package_dir}/usr/share/postgresql/${{ matrix.pg_version}}/extension
          cp archive/*.so ${package_dir}/usr/lib/postgresql/${{ matrix.pg_version }}/lib
          cp archive/*.control ${package_dir}/usr/share/postgresql/${{ matrix.pg_version }}/extension
          cp archive/*.sql ${package_dir}/usr/share/postgresql/${{ matrix.pg_version }}/extension

          # Create control file (package name cannot have underscore)
          mkdir -p ${package_dir}/DEBIAN
          touch ${package_dir}/DEBIAN/control
          deb_version=${{ steps.version.outputs.version }}
          CONTROL_FILE="${package_dir}/DEBIAN/control"
          echo 'Package: pg-bm25' >> $CONTROL_FILE
          echo 'Version:' ${deb_version} >> $CONTROL_FILE
          echo 'Architecture: ${{ steps.arch.outputs.arch }}' >> $CONTROL_FILE
          echo 'Maintainer: ParadeDB <support@paradedb.com>' >> $CONTROL_FILE
          echo 'Description: Full text search for PostgreSQL using BM25' >> $CONTROL_FILE

          # Create .deb package
          sudo chown -R root:root ${package_dir}
          sudo chmod -R 00755 ${package_dir}
          sudo dpkg-deb --build --root-owner-group ${package_dir}

      - name: Retrieve GitHub Release Upload URL
        id: upload_url
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/${{ github.repository }}/releases/latest | jq .upload_url --raw-output) >> $GITHUB_OUTPUT

      - name: Upload pg_bm25 .deb to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
        with:
          upload_url: ${{ steps.upload_url.outputs.upload_url }}
          asset_path: ./pg_bm25-${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}-${{ steps.arch.outputs.arch }}-linux-gnu.deb
          asset_name: pg_bm25-v${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}-${{ steps.arch.outputs.arch }}-linux-gnu.deb
          asset_content_type: application/vnd.DEBIAN.binary-package

# workflows/test-pg_search.yml
#
# pg_search: Tests
# Run unit and packaging tests for the pg_search extension.

name: Testing

on:
  pull_request:
    branches:
      - dev
      - staging
      - main
    paths:
      - "pg_search/**"
      - "!pg_search/README.md"
      - ".github/workflows/test-pg_search.yml"
  workflow_dispatch:

concurrency:
  group: test-pg_search-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test-pg_search:
    name: Test pg_search on PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [11, 12, 13, 14, 15]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
          key: ${{ runner.os }}-cargo-pgrx-0.9.8-grcov

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/extension/ /usr/lib/postgresql/${{ matrix.pg_version }}/lib/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install pgrx, grcov & llvm-tools-preview
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-pgrx --version 0.9.8 && cargo install grcov
          rustup component add llvm-tools-preview

      - name: Initialize pgrx for Current PostgreSQL Version
        working-directory: pg_search/
        run: cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config

      - name: Run pg_search Integration Tests
        working-directory: pg_search/
        run: ./test/runtests.sh "${{ matrix.pg_version }}"

      - name: Run pg_search Unit Tests
        env:
          LLVM_PROFILE_FILE: target/coverage/pg_search-%p-%m.profraw
          RUST_BACKTRACE: 1
        run: |
          mkdir -p target/coverage target/coverage-report
          cd pg_search/ && cargo pgrx test --features pg${{ matrix.pg_version }}

      - name: Generate Code Coverage Report
        run: grcov . -s . --binary-path ./target/debug/ -t lcov --branch --ignore-not-existing -o ./target/coverage-report/

      - name: Upload Coverage Reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./target/coverage-report/
          files: lcov
          fail_ci_if_error: true

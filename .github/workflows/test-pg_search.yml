# workflows/test-pg_search.yml
#
# Test pg_search
# Run unit and integration tests for the pg_search extension.

name: Test pg_search

on:
  pull_request:
    branches:
      - dev
      - staging
      - main
    paths:
      - "pg_search/**"
      - "!pg_search/README.md"
      - ".github/workflows/test-pg_search.yml"
  workflow_dispatch:

concurrency:
  group: test-pg_search-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-pg_search:
    name: Test pg_search on PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [12, 13, 14, 15, 16]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Remove old postgres, llvm, clang, and install appropriate version
        run: |
          sudo apt-get remove -y '^postgres.*' '^libpq.*' '^mono-llvm.*'
          apt list --installed 'clang*' 'llvm*' 'libclang*' 'libllvm*' | awk -F/ -e '{print $1}' | grep -P '\d' | grep -vP '\D15(\D.*)?$' | xargs sudo apt remove -y
          sudo apt-get install -y llvm-15-dev libclang-15-dev clang-15 gcc

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update && sudo apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }} postgresql-client-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/extension/ /usr/lib/postgresql/${{ matrix.pg_version }}/lib/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install pgrx, grcov & llvm-tools-preview
        run: |
          cargo install --locked cargo-pgrx --version 0.11.0 && cargo install --locked grcov
          rustup component add llvm-tools-preview

      - name: Initialize pgrx for Current PostgreSQL Version
        working-directory: pg_search/
        run: cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config

      # The integration tests also test upgrading the extension when passed the '-u' flag (only on promotion PRs)
      - name: Run pg_search Integration Tests
        working-directory: pg_search/
        run: |
          if [[ "${{ github.base_ref }}" == "main" && "${{ matrix.pg_version }} == "15" ]]; then
            ./test/runtests.sh -p sequential -v "${{ matrix.pg_version }}" -u
          else
            ./test/runtests.sh -p sequential -v "${{ matrix.pg_version }}"
          fi

      - name: Run pg_search Unit Tests
        env:
          LLVM_PROFILE_FILE: target/coverage/pg_search-%p-%m.profraw
          RUST_BACKTRACE: 1
        run: |
          mkdir -p target/coverage target/coverage-report
          cd pg_search/ && cargo pgrx test --features pg${{ matrix.pg_version }}

      # TODO: Reenable Codecov when we start writing unit tests
      # - name: Generate Code Coverage Reports
      #   run: grcov . -s . --binary-path ./target/debug/ -t lcov --branch --ignore-not-existing -o ./target/coverage-report/

      # - name: Upload Coverage Reports to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     directory: ./target/coverage-report/
      #     files: lcov
      #     fail_ci_if_error: true

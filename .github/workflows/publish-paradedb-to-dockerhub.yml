# workflows/publish-paradedb-to-dockerhub.yml
#
# ParadeDB: Publish to Docker Hub
# Publish ParadeDB as a Docker image to Docker Hub. This workflow only runs after a GitHub Release gets
# created, which happens once we merge to `main`.

name: Publishing

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

concurrency:
  group: publish-paradedb-to-dockerhub-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-paradedb-to-dockerhub:
    name: Publish ParadeDB for PostgreSQL ${{ matrix.pg_version }} to Docker Hub
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [15] # As of writing, we only publish for PostgreSQL 15

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Retrieve GitHub Tag
        id: version
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Configure Depot CLI
        uses: depot/setup-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Retrieve Third-Party PostgreSQL Extension Versions
        id: retrieve_pgx_versions
        working-directory: ./conf
        run: |
          extensions=$(jq -r 'keys[]' third_party_pg_extensions.json5)
          for ext in $extensions; do
            version=$(jq -r ".[\"$ext\"].version" third_party_pg_extensions.json5)
            echo "${ext^^}_VERSION=$version" >> $GITHUB_OUTPUT
          done

      # TODO: Could make this not list one-by-one each extension
      - name: Build and Push Docker Image to Docker Hub
        uses: depot/build-push-action@v1
        with:
          context: .
          build-args: |
            PG_VERSION_MAJOR=${{ matrix.pg_version }}
            PG_BM25_VERSION=${{ steps.version.outputs.version }}
            PG_SEARCH_VERSION=${{ steps.version.outputs.version }}
            PGML_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGML_VERSION }}
            PGVECTOR_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGVECTOR_VERSION }}
            PGAUDIT_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGAUDIT_VERSION }}
            PG_NET_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_NET_VERSION }}
            PG_GRAPHQL_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_GRAPHQL_VERSION }}
            PG_JSONSCHEMA_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_JSONSCHEMA_VERSION }}
            PGNODEMX_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGNODEMX_VERSION }}
            PG_CRON_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_CRON_VERSION }}
            PG_IVM_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_IVM_VERSION }}
            PG_HASHIDS_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_HASHIDS_VERSION }}
            PG_REPACK_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_REPACK_VERSION }}
            PG_STAT_MONITOR_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_STAT_MONITOR_VERSION }}
            PG_HINT_PLAN_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_HINT_PLAN_VERSION }}
            PG_ROARINGBITMAP_VERSION=${{ steps.retrieve_pgx_versions.outputs.PG_ROARINGBITMAP_VERSION }}
            PGFACETING_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGFACETING_VERSION }}
            PGTAP_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGTAP_VERSION }}
            POSTGIS_VERSION=${{ steps.retrieve_pgx_versions.outputs.POSTGIS_VERSION }}
            PGROUTING_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGROUTING_VERSION }}
            PGSQL_HTTP_VERSION=${{ steps.retrieve_pgx_versions.outputs.PGSQL_HTTP_VERSION }}
            HYPOPG_VERSION=${{ steps.retrieve_pgx_versions.outputs.HYPOPG_VERSION }}
            RUM_VERSION=${{ steps.retrieve_pgx_versions.outputs.RUM_VERSION }}
            AGE_VERSION=${{ steps.retrieve_pgx_versions.outputs.AGE_VERSION }}
          platforms: linux/amd64,linux/arm64
          file: docker/Dockerfile
          push: true
          project: ${{ secrets.DEPOT_PROJECT }}
          token: ${{ secrets.DEPOT_TOKEN }}
          tags: |
            paradedb/paradedb:latest
            paradedb/paradedb:${{ steps.version.outputs.tag }}
            paradedb/paradedb:${{ steps.version.outputs.version }}

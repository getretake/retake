# workflows/test-pg_search-stressgres.yml
#
# Test pg_search Stressgres
# Run the Stressgres stress testing against pg_search.

name: Test pg_search Stressgres

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - dev
      - main
    paths:
      - ".github/workflows/test-pg_search-stressgres.yml"
      - "pg_search/**"
      - "tokenizers/**"
  schedule:
    - cron: "1 0 * * 1,2,3,4,5" # Run once per day on weekdays (days of the week 1-5) at 00:01 UTC
  push:
    branches: # Also run on `dev` and `main` to fill the GitHub Actions Rust cache in a way that PRs can see it
      - dev
      - main
    paths:
      - "**/*.rs"
      - "**/*.toml"
  workflow_dispatch:

jobs:
  test-pg_search-stressgres:
    name: Run Stressgres on pg_search with PostgreSQL ${{ matrix.pg_version }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubicloud-standard-8
            pg_version: 17
            arch: amd64
    env:
      default_pg_version: 17

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4
        with:
          path: paradedb

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Extract pgrx Version
        id: pgrx
        working-directory: paradedb/pg_search/
        run: |
          version=$(cargo tree --depth 1 -i pgrx -p pg_search | head -n 1 | sed -E 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version=$version" >> $GITHUB_OUTPUT

      # Caches from base branches are available to PRs, but not across unrelated branches, so we only
      # save the cache on the 'dev' branch, but load it on all branches.
      - name: Install Rust Cache
        uses: ubicloud/rust-cache@v2
        with:
          prefix-key: "v1-rust"
          key: ${{ matrix.pg_version }}-${{ steps.pgrx.outputs.version }}
          cache-targets: true
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/dev' }}

      - name: Install required system tools
        run: sudo apt-get update && sudo apt-get install -y lsof

      - name: Install llvm-tools-preview
        run: rustup component add llvm-tools-preview

      - name: Install cargo-pgrx
        run: cargo install -j $(nproc) --locked cargo-pgrx --version ${{ steps.pgrx.outputs.version }} --debug

      - name: Download Asciinema v3.0.0-rc.3
        run: |
          curl -L https://github.com/asciinema/asciinema/releases/download/v3.0.0-rc.3/asciinema-x86_64-unknown-linux-gnu -o asciinema
          chmod +x asciinema
          mv asciinema /usr/local/bin/

      - name: Initialize cargo-pgrx environment
        run: cargo pgrx init "--pg${{ matrix.pg_version }}=download"

      - name: Checkout Stressgres Repo
        uses: actions/checkout@v4
        with:
          repository: paradedb/stressgres
          path: stressgres
          ref: neil/unpaused
          token: ${{ secrets.GHA_CREATE_RELEASE_PAT }}

      - name: Add pg_search to shared_preload_libraries
        working-directory: /home/runner/.pgrx/data-${{ matrix.pg_version }}/
        run: sed -i "s/^#shared_preload_libraries = .*/shared_preload_libraries = 'pg_search'/" postgresql.conf

      - name: Compile & install pg_search extension
        working-directory: paradedb/pg_search/
        run: cargo pgrx install --pg-config ~/.pgrx/${{ matrix.pg_version }}.*/pgrx-install/bin/pg_config --features=pg${{ matrix.pg_version }},icu

      - name: Start Postgres and create database
        working-directory: paradedb/tests/
        run: |
          RUST_BACKTRACE=1 cargo pgrx start pg${{ matrix.pg_version }}
          ~/.pgrx/${{ matrix.pg_version }}.*/pgrx-install/bin/createdb -p 288${{ matrix.pg_version }} -h localhost pg_search

      - name: Run Stressgres with Timeout
        working-directory: stressgres/
        run: |
          # Make sure to cargo build first, or the timeout will including compilation time.
          # Pass 'false' as last argument to start unpaused.
          RUST_BACKTRACE=1 cargo build && timeout 6s /usr/local/bin/asciinema rec \
            --headless \
            --command 'cargo run suites/ci.toml "host=localhost port=28817 dbname=postgres" false' \
            stressgres.cast || EXIT_CODE=$?

          if [ "$EXIT_CODE" -eq 124 ]; then
            echo "Process timed out as expected."
          fi

      - name: Upload stressgres.cast
        uses: actions/upload-artifact@v4
        with:
          name: stressgres-session
          path: stressgres/stressgres.cast

      - name: Print Postgres Logs
        run: cat ~/.pgrx/${{ matrix.pg_version }}.log

      - name: Notify Slack on Failure
        if: failure() && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main')
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Stressgres pg_search Workflow failed in `paradedb/paradedb` -- investigate immediately!"}' ${{ secrets.SLACK_WEBHOOK_URL }}

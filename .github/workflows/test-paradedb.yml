# workflows/test-paradedb.yml
#
# Test ParadeDB
# Test building the ParadeDB Docker Image using Docker Compose. We use a ubuntu-latest-m
# runner for faster builds and to avoid running out of storage on the runner.

name: Test ParadeDB

on:
  pull_request:
    branches:
      - main
      - staging
      - dev
    paths:
      - "docker/**"
      - ".github/workflows/test-paradedb.yml"
  workflow_dispatch:

concurrency:
  group: test-paradedb-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-paradedb:
    name: Test ParadeDB on PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest-m # Size: 4-cores · 16 GB RAM · 150 GB SSD
    strategy:
      matrix:
        pg_version: [16]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      # By using the docker-compose.dev.yml file, we also test that the build arguments are correct
      - name: Test Building ParadeDB Docker Image
        working-directory: docker/
        run: docker buildx create --use && docker compose -f docker-compose.dev.yml build

      # We run in detached mode to avoid blocking the workflow
      - name: Run ParadeDB Docker Image
        working-directory: docker/
        run: docker compose -f docker-compose.dev.yml up -d

      # Execute the ParadeDB quickstart tutorial, to test basic functionalities
      - name: Execute ParadeDB Quickstart Tutorial
        run: |
          export PGPASSWORD=mypassword
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'CALL paradedb.create_bm25_test_table(schema_name => "public", table_name => "mock_items");'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT description, rating, category FROM mock_items LIMIT 3;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'CALL paradedb.create_bm25(index_name => "search_idx", schema_name => "public", table_name => "mock_items", key_field => "id", text_fields => "{description: {tokenizer: {type: "en_stem"}}, category: {}}");'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT description, rating, category FROM search_idx.search("description:keyboard OR category:electronics") LIMIT 5;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT description, rating, category FROM search_idx.search('description:"bluetooth speaker"~1') LIMIT 5;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'CALL paradedb.create_bm25(index_name => "ngrams_idx", schema_name => "public", table_name => "mock_items", key_field => "id", text_fields => "{description: {tokenizer: {type: "ngram", min_gram: 4, max_gram: 4, prefix_only: false}}, category: {}}");'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT description, rating, category FROM ngrams_idx.search('description:blue');'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT s.description, h.highlight_bm25, r.rank_bm25 FROM ngrams_idx.search('description:blue') as s LEFT JOIN ngrams_idx.highlight('description:blue', highlight_field => 'description') as h ON s.id = h.id LEFT JOIN ngrams_idx.rank('description:blue') as r ON s.id = r.id;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'ALTER TABLE mock_items ADD COLUMN embedding vector(3);'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'UPDATE mock_items m SET embedding = ('[' || ((m.id + 1) % 10 + 1)::integer || ',' || ((m.id + 2) % 10 + 1)::integer || ',' || ((m.id + 3) % 10 + 1)::integer || ']')::vector;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT description, rating, category, embedding FROM mock_items LIMIT 3;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'CREATE INDEX on mock_items USING hnsw (embedding vector_l2_ops);'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT description, category, rating, embedding FROM mock_items ORDER BY embedding <-> '[1,2,3]' LIMIT 3;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT * FROM search_idx.rank_hybrid(bm25_query => 'description:keyboard OR category:electronics', similarity_query => '''[1,2,3]'' <-> embedding', bm25_weight => 0.9, similarity_weight => 0.1) LIMIT 5;'
          psql -h localhost -U myuser -d mydatabase -p 5432 -t -c 'SELECT m.description, m.category, m.embedding, s.rank_hybrid FROM mock_items m LEFT JOIN (SELECT * FROM search_idx.rank_hybrid(bm25_query => 'description:keyboard OR category:electronics', similarity_query => '''[1,2,3]'' <-> embedding', bm25_weight => 0.9, similarity_weight => 0.1)) s ON m.id = s.id LIMIT 5;'

# workflows/test-paradedb.yml
#
# Test ParadeDB
# Test building the ParadeDB Docker Image using Docker Compose. We use a ubuntu-latest-m
# runner for faster builds and to avoid running out of storage on the runner.

name: Test ParadeDB

on:
  pull_request:
    branches:
      - main
      - staging
      - dev
    paths:
      - "docker/**"
      - ".github/workflows/test-paradedb.yml"
  workflow_dispatch:

concurrency:
  group: test-paradedb-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-paradedb:
    name: Test ParadeDB on PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest-m # Size: 4-cores · 16 GB RAM · 150 GB SSD
    strategy:
      matrix:
        pg_version: [16]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      # By using the docker-compose.dev.yml file, we also test that the build arguments are correct
      - name: Test Building ParadeDB Docker Image
        working-directory: docker/
        run: docker buildx create --use && docker compose -f docker-compose.dev.yml build

      # We run in detached mode to avoid blocking the workflow
      - name: Run ParadeDB Docker Image
        working-directory: docker/
        run: docker compose -f docker-compose.dev.yml up -d

      # Execute the ParadeDB quickstart tutorial, to test basic functionalities
      - name: Execute ParadeDB Quickstart Tutorial via pg_regress
        run: |
          # Sleep for 10 seconds to allow Postgres to start
          sleep 10

          # Load the quickstart tutorial files into the Docker container
          docker cp .github/workflows/helpers/quickstart.sql docker-paradedb-dev-1:$HOME
          docker cp .github/workflows/helpers/quickstart.out docker-paradedb-dev-1:$HOME

          # Run the quickstart tutorial via pg_regress through Docker
          docker exec -d docker-paradedb-dev-1 "/usr/lib/postgresql/${{ matrix.pg_version }}/lib/pgxs/src/test/regress/pg_regress --use-existing --dbname=mydatabase --inputdir=$HOME"

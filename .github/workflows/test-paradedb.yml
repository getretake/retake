# workflows/test-paradedb.yml
#
# Test ParadeDB
# Test building the ParadeDB Docker Image using Docker Compose.

name: Test ParadeDB

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - dev
    paths:
      - ".github/workflows/test-paradedb.yml"
      - "docker/**"
      - "pg_analytics/**"
      - "!pg_analytics/README.md"
      - "pg_search/**"
      - "!pg_search/README.md"
      - "shared/**"
      - "tokenizers/**"
  workflow_dispatch:

concurrency:
  group: test-paradedb-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-paradedb:
    name: Test ParadeDB on PostgreSQL ${{ matrix.pg_version }} for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        include:
          - runner: depot-ubuntu-latest-2
            pg_version: 16
            arch: amd64
          - runner: depot-ubuntu-latest-arm-2
            pg_version: 16
            arch: arm64

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Configure Depot CLI
        uses: depot/setup-action@v1

      # We keep PARADEDB_TELEMETRY=true to test the telemetry feature, even though this isn't real usage.
      - name: Build the ParadeDB Docker Image via Depot
        uses: depot/build-push-action@v1
        with:
          context: .
          build-args: |
            POSTHOG_API_KEY=${{ secrets.POSTHOG_API_KEY }}
            POSTHOG_HOST=${{ secrets.POSTHOG_HOST }}
            COMMIT_SHA=testcommitsha
            PARADEDB_TELEMETRY=true
          platforms: linux/${{ matrix.arch }}
          file: docker/Dockerfile
          push: false # Don't push to Docker Hub
          load: true # Load the image into the Docker daemon of the runner
          project: ${{ secrets.DEPOT_PROJECT }}
          token: ${{ secrets.DEPOT_TOKEN }}
          tags: paradedb/paradedb:latest # Tag the local image as latest so it gets picked up by Docker Compose

      # Sleep 10 seconds to give time for Postgres to start inside the container. The docker-compose.yml file
      # will use the local ParadeDB image that we just built.
      - name: Start the ParadeDB Docker Image
        working-directory: docker/
        run: docker compose -f docker-compose.yml up -d && sleep 10

      # We run the container in detached mode, and grep for the word ERROR to see if it failed to start correctly
      - name: Check for Errors in the ParadeDB Docker Image
        working-directory: docker/
        run: |
          CONTAINER_ID=$(docker ps -aq --filter "name=paradedb")
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)
          echo "paradedb container ID: $CONTAINER_ID"
          echo "Container status: $CONTAINER_STATUS"

          echo ""
          echo "Printing logs for the ParadeDB Docker container..."
          docker logs $CONTAINER_ID

          # Fail the run if the container failed to start
          if [ "$CONTAINER_STATUS" = "exited" ]; then
            echo "Error: Container failed to start properly"
            exit 1
          fi

          # Fail the run if there are any Postgres ERRORs in the logs
          if docker logs $CONTAINER_ID | grep -q ERROR; then
            echo "Error: ParadeDB Docker container logs contain an error"
            exit 1
          fi

# workflows/test-paradedb.yml
#
# Test ParadeDB
# Test building the ParadeDB Docker Image using Docker Compose.

name: Test ParadeDB

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - dev
    paths:
      - ".github/workflows/test-paradedb.yml"
      - "docker/**"
      - "pg_lakehouse/**"
      - "!pg_lakehouse/README.md"
      - "pg_search/**"
      - "!pg_search/README.md"
      - "shared/**"
      - "tokenizers/**"
  workflow_dispatch:

concurrency:
  group: test-paradedb-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  test-paradedb:
    name: Test ParadeDB on PostgreSQL ${{ matrix.pg_version }}
    runs-on: depot-ubuntu-latest-8
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        pg_version: [16]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      # By using the docker-compose.dev.yml file, we also test that the build arguments are correct
      - name: Build the ParadeDB Docker Image
        working-directory: docker/
        run: docker buildx create --use && docker compose -f docker-compose.dev.yml build

      # Sleep 10 seconds to give time for Postgres to start inside the container
      - name: Start the ParadeDB Docker Image
        working-directory: docker/
        run: docker compose -f docker-compose.dev.yml up -d && sleep 10

      # We run the container in detached mode, and grep for the word ERROR to see if it failed to start correctly
      - name: Check for Errors in the ParadeDB Docker Image
        working-directory: docker/
        run: |
          CONTAINER_ID=$(docker ps -aq --filter "name=paradedb-dev")
          echo "paradedb-dev container ID: $CONTAINER_ID"

          if [ -z "$CONTAINER_ID" ]; then
            echo "Error: Container 'paradedb-dev' was not found. It may have failed to start."
            exit 1
          fi

          echo "Printing logs for the ParadeDB Docker container..."
          docker logs $CONTAINER_ID

          echo "Checking container status..."
          CONTAINER_STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)

          if [ "$CONTAINER_STATUS" != "running" ]; then
            echo "Error: Container 'paradedb-dev' is not running. Current status: $CONTAINER_STATUS"
            exit 1
          fi

          echo "Checking for errors in the ParadeDB Docker Image logs..."
          docker logs $CONTAINER_ID | grep -q ERROR && exit 1 || exit 0

# workflows/publish-pg_search.yml
#
# Publish pg_search
# Build and publish the pg_search extension as a .deb to GitHub Releases.

name: Publish pg_search

on:
  push:
    branches:
      - phil/rhel
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "The version to set for the pg_search release. This publishes the latest commit of the chosen branch and uploads it to the pre-existing GitHub Release of the provided version."
        required: true
        default: ""

concurrency:
  group: publish-pg_search-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-pg_search:
    name: Publish pg_search for PostgreSQL ${{ matrix.pg_version }} on ${{ matrix.image }} ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    container:
      image: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          # # Ubuntu 22.04
          # - runner: depot-ubuntu-22.04-4
          #   image: ubuntu:22.04
          #   pg_version: 14
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: ubuntu:22.04
          #   pg_version: 14
          #   arch: arm64
          # - runner: depot-ubuntu-22.04-4
          #   image: ubuntu:22.04
          #   pg_version: 15
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: ubuntu:22.04
          #   pg_version: 15
          #   arch: arm64
          # - runner: depot-ubuntu-22.04-4
          #   image: ubuntu:22.04
          #   pg_version: 16
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: ubuntu:22.04
          #   pg_version: 16
          #   arch: arm64
          # # Debian 11
          # - runner: depot-ubuntu-22.04-4
          #   image: debian:11-slim
          #   pg_version: 14
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: debian:11-slim
          #   pg_version: 14
          #   arch: arm64
          # - runner: depot-ubuntu-22.04-4
          #   image: debian:11-slim
          #   pg_version: 15
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: debian:11-slim
          #   pg_version: 15
          #   arch: arm64
          # - runner: depot-ubuntu-22.04-4
          #   image: debian:11-slim
          #   pg_version: 16
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: debian:11-slim
          #   pg_version: 16
          #   arch: arm64
          # # Debian 12
          # - runner: depot-ubuntu-22.04-4
          #   image: debian:12-slim
          #   pg_version: 14
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: debian:12-slim
          #   pg_version: 14
          #   arch: arm64
          # - runner: depot-ubuntu-22.04-4
          #   image: debian:12-slim
          #   pg_version: 15
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: debian:12-slim
          #   pg_version: 15
          #   arch: arm64
          # - runner: depot-ubuntu-22.04-4
          #   image: debian:12-slim
          #   pg_version: 16
          #   arch: amd64
          # - runner: depot-ubuntu-22.04-arm-4
          #   image: debian:12-slim
          #   pg_version: 16
          #   arch: arm64

          - runner: depot-ubuntu-22.04-4
            image: redhat/ubi9:latest
            pg_version: 16
            arch: amd64
          - runner: depot-ubuntu-22.04-arm-4
            image: redhat/ubi9:latest
            pg_version: 16
            arch: arm64

          # TODO: Add Ubuntu 20.04, RedHat UBI 8, and RedHat UBI 9
          # TODO: Maybe consider removing debian-slim for regular debian, and removing manual apt downloads

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Install extra RHEL Dependencies
        if: ${{ matrix.image == 'redhat/ubi8:latest' || matrix.image == 'redhat/ubi9:latest' }}
        run: |
          dnf install epel-release
          dnf update

      - name: Install Debian Dependencies
        if: ${{ matrix.image == 'debian:11-slim' || matrix.image == 'debian:12-slim' }}
        run: DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y sudo wget curl gnupg lsb-release pkg-config libssl-dev jq

      - name: Install RHEL Dependencies
        if: ${{ matrix.image == 'redhat/ubi8:latest' || matrix.image == 'redhat/ubi9:latest' }}
        run: |
          dnf install -y sudo wget pkgconf-pkg-config openssl-devel jq perl

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Retrieve OS & GitHub Tag Versions
        id: version
        run: |
          # If no workflow_dispatch version is provided, we use workflow tag trigger version
          if [ -z "${{ github.event.inputs.version }}" ]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi

          if [ -x "$(command -v lsb_release)" ]; then
            DISTRO=$(echo "$(lsb_release -is)" | tr '[:upper:]' '[:lower:]')
            RELEASE=$(lsb_release -rs)
          else
            DISTRO=$(cat /etc/os-release | grep ^ID= | cut -d= -f2 | tr -d '"')
            RELEASE=$(cat /etc/os-release | grep ^VERSION_ID= | cut -d= -f2 | tr -d '"')
          fi
          echo "OS Version: $DISTRO-$RELEASE"
          echo "os_version=$DISTRO-$RELEASE" >> $GITHUB_OUTPUT

      - name: Install & Configure Supported PostgreSQL Version on Debian
        if: ${{ matrix.image == 'debian:11-slim' || matrix.image == 'debian:12-slim' || matrix.image == 'ubuntu:22.04'}}
        run: |
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo DEBIAN_FRONTEND=noninteractive apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }} debhelper devscripts dput gnupg
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/ /usr/lib/postgresql/${{ matrix.pg_version }}/ /var/lib/postgresql/${{ matrix.pg_version }}/>
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install & Configure Supported PostgreSQL Version on RHEL
        if: ${{ matrix.image == 'redhat/ubi8' || matrix.image == 'redhat/ubi9:latest' }}
        run: |
          sudo dnf -y install https://download.postgresql.org/pub/repos/yum/reporpms/EL-$(rpm -E %{rhel})-x86_64/pgdg-redhat-repo-latest.noarch.rpm
          sudo rpm --import /etc/pki/rpm-gpg/PGDG-RPM-GPG-KEY-RHEL
          sudo dnf clean all
          sudo dnf -y install postgresql${{ matrix.pg_version }} postgresql${{ matrix.pg_version }}-server postgresql${{ matrix.pg_version }}-devel --disablerepo='pgdg-common'
          sudo /usr/pgsql-${{ matrix.pg_version }}/bin/postgresql-${{ matrix.pg_version }}-setup initdb
          sudo systemctl enable postgresql-${{ matrix.pg_version }}
          sudo systemctl start postgresql-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/pgsql-${{ matrix.pg_version }}/ /var/lib/pgsql/${{ matrix.pg_version }}/data/
          echo "/usr/pgsql-${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      - name: Install pgrx
        run: cargo install --locked cargo-pgrx --version 0.11.3

      - name: Initialize pgrx for Current PostgreSQL Version
        working-directory: pg_search/
        run: cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config

      # We remove the native CPU optimization for the build, as we don't know what CPU architecture the user will be running our
      # prebuilt binaries on. This reduces performance, but is necessary for compatibility. For the most optimized build, users should
      # build the extension directly on their target machine, or use our Docker image.
      - name: Package pg_search Extension with pgrx
        working-directory: pg_search/
        run: |
          sed -i '/# Global settings - optimize for the native CPU for all targets./,/\[build\]/d; /rustflags = \["-Ctarget-cpu=native"\]/d' ../.cargo/config.toml
          cargo pgrx package --features icu

      - name: Create .deb Package
        run: |
          # Create installable package
          mkdir archive
          cp `find target/release -type f -name "pg_search*"` archive
          package_dir=pg_search-${{ steps.version.outputs.version }}-${{ steps.version.outputs.os_version }}-${{ matrix.arch }}-pg${{ matrix.pg_version }}

          # Copy files into directory structure
          mkdir -p ${package_dir}/usr/lib/postgresql/lib
          mkdir -p ${package_dir}/var/lib/postgresql/extension
          cp archive/*.so ${package_dir}/usr/lib/postgresql/lib
          cp archive/*.control ${package_dir}/var/lib/postgresql/extension
          cp archive/*.sql ${package_dir}/var/lib/postgresql/extension

          # Symlinks to copy files into directory structure
          mkdir -p ${package_dir}/usr/lib/postgresql/${{ matrix.pg_version }}/lib
          mkdir -p ${package_dir}/usr/share/postgresql/${{ matrix.pg_version}}/extension
          cp archive/*.so ${package_dir}/usr/lib/postgresql/${{ matrix.pg_version }}/lib
          cp archive/*.control ${package_dir}/usr/share/postgresql/${{ matrix.pg_version }}/extension
          cp archive/*.sql ${package_dir}/usr/share/postgresql/${{ matrix.pg_version }}/extension

          # Create control file (package name cannot have underscore)
          mkdir -p ${package_dir}/DEBIAN
          touch ${package_dir}/DEBIAN/control
          deb_version=${{ steps.version.outputs.version }}
          CONTROL_FILE="${package_dir}/DEBIAN/control"
          echo 'Package: pg-search' >> $CONTROL_FILE
          echo 'Version:' ${deb_version} >> $CONTROL_FILE
          echo 'Section: database' >> $CONTROL_FILE
          echo 'Priority: optional' >> $CONTROL_FILE
          echo 'Architecture: ${{ matrix.arch }}' >> $CONTROL_FILE
          echo 'Depends: postgresql-${{ matrix.pg_version }}' >> $CONTROL_FILE
          echo 'Maintainer: ParadeDB <support@paradedb.com>' >> $CONTROL_FILE
          echo 'Description: Full-text search for PostgreSQL using BM25' >> $CONTROL_FILE

          # Create .deb package
          # Note: We specify `xz` compression for compatibility with Debian 11
          sudo chown -R root:root ${package_dir}
          sudo chmod -R 755 ${package_dir}
          sudo dpkg-deb -Zxz --build --root-owner-group ${package_dir}

      # We retrieve the GitHub release for the specific release version
      - name: Retrieve GitHub Release Upload URL
        id: upload_url
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ steps.version.outputs.version }} | jq .upload_url --raw-output) >> $GITHUB_OUTPUT

      - name: Upload pg_search .deb to GitHub Release
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
          upload_url: ${{ steps.upload_url.outputs.upload_url }}
          asset_path: ./pg_search-${{ steps.version.outputs.version }}-${{ steps.version.outputs.os_version }}-${{ matrix.arch }}-pg${{ matrix.pg_version }}.deb
          asset_name: pg_search-v${{ steps.version.outputs.version }}-${{ steps.version.outputs.os_version }}-${{ matrix.arch }}-pg${{ matrix.pg_version }}.deb

# workflows/publish-paradedb-github-release.yml
#
# ParadeDB: Publish GitHub Release
# Publish the ParadeDB GitHub Release.

name: Publishing

on:
  push:
    branches:
      - main
      - staging
      - dev
  workflow_dispatch:

concurrency:
  group: publish-paradedb-github-release-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-paradedb-github-release:
    name: Publish ParadeDB GitHub Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "Using prod configuration..."
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "Using staging configuration..."
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "Using dev configuration..."
          fi

      - name: Retrieve & Increment Current Version Number
        id: version
        run: |
          echo "Current prod version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}"
          echo "Current staging version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-staging-rc.${{ vars.VERSION_STAGING_RC }}"
          echo "Current dev version: ${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-dev-rc.${{ vars.VERSION_DEV_RC }}"

          if [[ "${{ steps.env.outputs.environment }}" == "prod" ]]; then
            echo 'Using prod configuration...'

            # increment version by 0.0.1
            NEW_PATCH=$(( ${{ vars.VERSION_PATCH }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${NEW_PATCH}"
            GHA_VAR_NAME="VERSION_PATCH"
            GHA_VAR_VALUE="${NEW_PATCH}"
          elif [[ "${{ steps.env.outputs.environment }}" == "staging" ]]; then
            echo 'Using staging configuration...'

            # increment version by staging-rc.1
            NEW_STAGING_RC=$(( ${{ vars.VERSION_STAGING_RC }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-staging-rc.${NEW_STAGING_RC}"
            GHA_VAR_NAME="VERSION_STAGING_RC"
            GHA_VAR_VALUE="${NEW_STAGING_RC}"
          elif [[ "${{ steps.env.outputs.environment }}" == "dev" ]]; then
            echo 'Using dev configuration...'

            # increment version by dev-rc.1
            NEW_DEV_RC=$(( ${{ vars.VERSION_DEV_RC }} + 1 ))
            NEW_VERSION="${{ vars.VERSION_MAJOR }}.${{ vars.VERSION_MINOR }}.${{ vars.VERSION_PATCH }}-dev-rc.${NEW_DEV_RC}"
            GHA_VAR_NAME="VERSION_DEV_RC"
            GHA_VAR_VALUE="${NEW_DEV_RC}"
          else
            echo "Error: Invalid branch" && false
          fi

          # Output the new version to create the GitHub Release tag and update GitHub Actions variables
          echo "New version: ${NEW_VERSION}"
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "gha_var_name=${GHA_VAR_NAME}" >> $GITHUB_OUTPUT
          echo "gha_var_value=${GHA_VAR_VALUE}" >> $GITHUB_OUTPUT

      - name: Update Version Number in GitHub Actions Variables
        env:
          GH_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
        run: |
          # on prod we update patch and reset dev/staging RCs to 0
          if [[ "${{ steps.env.outputs.environment }}" == "prod" ]]; then
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/paradedb/paradedb/actions/variables/${{ steps.version.outputs.gha_var_name }} \
              -f name='${{ steps.version.outputs.gha_var_name }}' \
              -f value='${{ steps.version.outputs.gha_var_value }}'

            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/paradedb/paradedb/actions/variables/VERSION_DEV_RC \
              -f name='VERSION_DEV_RC' \
              -f value='0'

            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/paradedb/paradedb/actions/variables/VERSION_STAGING_RC \
              -f name='VERSION_STAGING_RC' \
              -f value='0'
          # on dev/staging we only update dev/staging RC
          elif [[ "${{ steps.env.outputs.environment }}" == "staging" || "${{ steps.env.outputs.environment }}" == "dev" ]]; then
            gh api \
              --method PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/paradedb/paradedb/actions/variables/${{ steps.version.outputs.gha_var_name }} \
              -f name='${{ steps.version.outputs.gha_var_name }}' \
              -f value='${{ steps.version.outputs.gha_var_value }}'
          else
            echo "Error: Invalid branch" && false
          fi

      - name: Create GitHub Release (prod only)
        if: steps.env.outputs.environment == 'prod'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}

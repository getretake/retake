# workflows/publish-third-party-pg_extensions.yml
#
# Third-Party PostgreSQL Extensions: Publish
# Build and publish the third-party PostgreSQL extensions used by ParadeDB to
# GitHub Releases. We use a separate storage repo, paradedb/third-party-extensions)
# for clarity and to avoid bloating the ParadeDB repo with binaries.

name: Publishing

on:
  push:
    branches:
      - phil/apt # TODO: remove this after testing
      - main
    # paths:
    #   - "conf/third_party_pg_extensions.json"
    #   - ".github/workflows/publish-third-party-pg_extensions.yml"
  workflow_dispatch:

concurrency:
  group: publish-third-party-pg_extensions-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-third-party-pg_extensions:
    name: Publish Third-Party PostgreSQL Extensions for PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [15] # As of writing, we only publish for PostgreSQL 15

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
          key: ${{ runner.os }}-cargo-pgrx-0.9.8
          restore-keys: |
            ${{ runner.os }}-cargo-pgrx
            ${{ runner.os }}-cargo

      - name: Retrieve GitHub Tag Version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Retrieve Arch
        id: arch
        run: |
          arch_val=$(uname -m)
          if [ "$arch_val" == "x86_64" ]; then
              mapped_arch="amd64"
          elif [ "$arch_val" == "aarch64" ]; then
              mapped_arch="arm64"
          else
              mapped_arch="$arch_val"
          fi
          echo "arch=$mapped_arch" >> $GITHUB_OUTPUT

      - name: Install & Configure Supported PostgreSQL Version
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget -qO- https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo tee /etc/apt/trusted.gpg.d/pgdg.asc &>/dev/null
          sudo apt-get update && sudo apt-get install -y --no-install-recommends postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          sudo chown -R $(whoami) /usr/share/postgresql/${{ matrix.pg_version }}/extension/ /usr/lib/postgresql/${{ matrix.pg_version }}/lib/ /usr/include/postgresql/${{ matrix.pg_version }}/server/ /usr/share/postgresql/${{ matrix.pg_version }}/contrib/ /usr/local/share/man/
          echo "/usr/lib/postgresql/${{ matrix.pg_version }}/bin" >> $GITHUB_PATH

      # - name: Install pgrx
      #   if: steps.cache-cargo.outputs.cache-hit != 'true'
      #   run: cargo install cargo-pgrx --version 0.9.8

      # - name: Initialize pgrx for Current PostgreSQL Version
      #   run: cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config

      # rum, pgaudit, postgis, pgml, pg_repack, AGE requirements
      - name: Install Third-Party PostgreSQL Extension Build Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            checkinstall \
            systemtap-sdt-dev \
            libkrb5-dev \
            libgeos-dev \
            libproj-dev \
            libprotobuf-c-dev \
            libsfcgal-dev \
            libxml2-dev \
            libjson-c-dev \
            libgdal-dev \
            gdal-bin \
            gettext \
            libtool \
            xsltproc \
            protobuf-c-compiler \
            zlib1g-dev \
            bison \
            flex \
            libreadline-dev

      # We release third-party PostgreSQL extensions to a dedicated repository (paradedb/third-party-pg_extensions)
      - name: Build and Push Third-Party PostgreSQL Extensions to GitHub Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
          PG_MAJOR_VERSION: ${{ matrix.pg_version }}
          ARCH: ${{ steps.arch.outputs.arch }}
        run: |
          extensions=$(jq -r '.extensions | keys[]' conf/third_party_pg_extensions.json)
          for ext in $extensions; do
            version=$(jq -r ".extensions.\"$ext\".version" conf/third_party_pg_extensions.json)
            url=$(jq -r ".extensions.\"$ext\".url" conf/third_party_pg_extensions.json)
            ./scripts/build_and_deploy_third_party_pg_extensions.sh "$ext,$version,$url"
          done

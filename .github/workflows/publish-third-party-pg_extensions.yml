# workflows/publish-third-party-pg_extensions.yml
#
# Third-Party PostgreSQL Extensions: Publish
# Build and publish the third-party PostgreSQL extensions used by ParadeDB to
# GitHub Releases. We use a separate storage repo, paradedb/third-party-extensions)
# for clarity and to avoid bloating the ParadeDB repo with binaries.

name: Publishing

on:
  push:
    branches:
      - phil/apt # TODO: remove this after testing
      - main
    paths:
      - "conf/third_party_pg_extensions.yml"
      - ".github/workflows/publish-third-party-pg_extensions.yml"
  workflow_dispatch:

concurrency:
  group: publish-third-party-pg_extensions-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  publish-third-party-pg_extensions:
    name: Publish Third Party PostgreSQL Extensions for PostgreSQL ${{ matrix.pg_version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [11, 12, 13, 14, 15]

    steps:
      - name: Checkout Git Repository
        uses: actions/checkout@v4

      - name: Cache Cargo Dependencies
        uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
          key: ${{ runner.os }}-cargo-pgrx-0.9.8
          restore-keys: |
            ${{ runner.os }}-cargo-pgrx
            ${{ runner.os }}-cargo

      - name: Retrieve GitHub Tag Version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Retrieve Arch
        id: arch
        run: |
          arch_val=$(uname -m)
          if [ "$arch_val" == "x86_64" ]; then
              mapped_arch="amd64"
          elif [ "$arch_val" == "aarch64" ]; then
              mapped_arch="arm64"
          else
              mapped_arch="$arch_val"
          fi
          echo "arch=$mapped_arch" >> $GITHUB_OUTPUT

      - name: Install pgrx
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: cargo install cargo-pgrx --version 0.9.8

      - name: Initialize pgrx for Current PostgreSQL Version
        run: cargo pgrx init --pg${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config

      - name: Retrieve Third-Party PostgreSQL Extension Versions
        id: retrieve_pgx_versions
        working-directory: conf/
        run: |
          while IFS=: read -r key value; do
            key=$(echo $key | tr -d ' ')
            value=$(echo $value | tr -d ' ')
            if [[ ! -z "$key" && ! -z "$value" ]]; then
              echo "${key}=${value}" >> $GITHUB_OUTPUT
            fi
          done < third_party_pg_extensions.yml

      # TODO: Could make this not list one-by-one each extension
      # We release third-party PostgreSQL extensions to a dedicated repository (paradedb/third-party-pg_extensions)
      - name: Build and Push Third-Party PostgreSQL Extensions to GitHub Releases
        working-directory: scripts/
        env:
          PGML_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGML_VERSION }}
          PGVECTOR_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGVECTOR_VERSION }}
          PGAUDIT_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGAUDIT_VERSION }}
          PG_NET_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_NET_VERSION }}
          PG_GRAPHQL_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_GRAPHQL_VERSION }}
          PG_JSONSCHEMA_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_JSONSCHEMA_VERSION }}
          PGNODEMX_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGNODEMX_VERSION }}
          PG_CRON_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_CRON_VERSION }}
          PG_IVM_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_IVM_VERSION }}
          PG_HASHIDS_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_HASHIDS_VERSION }}
          PG_REPACK_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_REPACK_VERSION }}
          PG_STAT_MONITOR_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_STAT_MONITOR_VERSION }}
          PG_HINT_PLAN_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_HINT_PLAN_VERSION }}
          PG_ROARINGBITMAP_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PG_ROARINGBITMAP_VERSION }}
          PGFACETING_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGFACETING_VERSION }}
          PGTAP_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGTAP_VERSION }}
          POSTGIS_VERSION: ${{ steps.retrieve_pgx_versions.outputs.POSTGIS_VERSION }}
          PGROUTING_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGROUTING_VERSION }}
          PGSQL_HTTP_VERSION: ${{ steps.retrieve_pgx_versions.outputs.PGSQL_HTTP_VERSION }}
          HYPOPG_VERSION: ${{ steps.retrieve_pgx_versions.outputs.HYPOPG_VERSION }}
          RUM_VERSION: ${{ steps.retrieve_pgx_versions.outputs.RUM_VERSION }}
          AGE_VERSION: ${{ steps.retrieve_pgx_versions.outputs.AGE_VERSION }}
        run: |




          # Check if a release exist for the repo for the extension+version pair
          # if yes, do nothing
          # otherwise, create a release, build the extension, retrieve the url, and upload it
          # repeat over all extensions



          # Each of them should be released independently, so they can be checked independently


          # For each extension listed here, build and package in the script!

      - name: Retrieve GitHub Release Upload URL
        id: upload_url
        run: echo UPLOAD_URL=$(curl --silent https://api.github.com/repos/${{ github.repository }}/releases/latest | jq .upload_url --raw-output) >> $GITHUB_OUTPUT

      - name: Upload pg_bm25 .deb to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_CREATE_RELEASE_PAT }}
        with:
          upload_url: ${{ steps.upload_url.outputs.upload_url }}
          asset_path: ./pg_bm25-${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}-${{ steps.arch.outputs.arch }}-linux-gnu.deb
          asset_name: pg_bm25-${{ steps.version.outputs.version }}-pg${{ matrix.pg_version }}-${{ steps.arch.outputs.arch }}-linux-gnu.deb
          asset_content_type: application/vnd.DEBIAN.binary-package
